From 6aaf5af4eb18a9b85e32d501663a2046cd406145 Mon Sep 17 00:00:00 2001
From: Dmitrii Pichulin <deem@deem.ru>
Date: Tue, 26 Sep 2017 16:30:04 +0300
Subject: [PATCH] added GOSTSSL

---
 .../common/chromium-browser/chromium-browser.info  | 10 ++--
 chrome/installer/linux/rpm/chrome.spec.template    |  4 ++
 net/base/net_error_list.h                          |  6 ++
 net/http/http_network_transaction.cc               |  8 +++
 net/socket/ssl_client_socket_openssl.cc            | 65 ++++++++++++++++++++++
 net/spdy/spdy_session.cc                           | 13 +++++
 net/ssl/openssl_ssl_util.cc                        |  4 ++
 net/ssl/ssl_cipher_suite_names.cc                  | 22 ++++++++
 8 files changed, 127 insertions(+), 5 deletions(-)

diff --git a/chrome/installer/linux/common/chromium-browser/chromium-browser.info b/chrome/installer/linux/common/chromium-browser/chromium-browser.info
index 3593c9e..9826523 100644
--- a/chrome/installer/linux/common/chromium-browser/chromium-browser.info
+++ b/chrome/installer/linux/common/chromium-browser/chromium-browser.info
@@ -6,22 +6,22 @@
 # chromium-browser packages for various platforms.
 
 # Base name of the package.
-PACKAGE="chromium-browser"
+PACKAGE="chromium-gost"
 
 # Filename of the main executable (for generating launcher scripts, etc.)
 PROGNAME=chrome
 
 # Base directory for package installation.
-INSTALLDIR=/opt/chromium.org/chromium
+INSTALLDIR=/opt/chromium-gost
 
 # Display string for desktop menu/icon.
-MENUNAME="Chromium Web Browser"
+MENUNAME="chromium-gost"
 
 # Brief package description.
-SHORTDESC="The web browser from Chromium.org"
+SHORTDESC="Chromium browser with GOST cryptography support"
 
 # Detailed package description.
-FULLDESC="Chromium is a browser that combines a minimal design with sophisticated technology to make the web faster, safer, and easier."
+FULLDESC="Chromium is a browser that combines a minimal design with sophisticated technology to make the web faster, safer, and easier. This version supports GOST cryptography in TLS-connections."
 
 # Package maintainer information.
 # TODO(mmoss) Setup a mailbox for this address
diff --git a/chrome/installer/linux/rpm/chrome.spec.template b/chrome/installer/linux/rpm/chrome.spec.template
index 08c402c..433e6f6 100644
--- a/chrome/installer/linux/rpm/chrome.spec.template
+++ b/chrome/installer/linux/rpm/chrome.spec.template
@@ -120,6 +120,8 @@ add_nss_symlinks
 
 remove_udev_symlinks
 
+if false; then
+
 DEFAULTS_FILE="/etc/default/@@PACKAGE@@"
 if [ ! -e "$DEFAULTS_FILE" ]; then
   echo 'repo_add_once="true"' > "$DEFAULTS_FILE"
@@ -155,6 +157,8 @@ fi
 service atd start
 echo "sh /etc/cron.daily/@@PACKAGE@@" | at now + 2 minute > /dev/null 2>&1
 
+fi
+
 CHANNEL=@@CHANNEL@@
 case $CHANNEL in
   stable )
diff --git a/net/base/net_error_list.h b/net/base/net_error_list.h
index 296024b..a5a8521 100644
--- a/net/base/net_error_list.h
+++ b/net/base/net_error_list.h
@@ -19,6 +19,12 @@
 //   700-799 Certificate manager errors
 //   800-899 DNS resolver errors
 
+#define GOSTSSL
+#if defined(GOSTSSL)
+//   3000-3099 GOSTSSL
+NET_ERROR(TLS_GOST_REQUIRED, -3072)
+#endif // GOSTSSL
+
 // An asynchronous IO operation is not yet complete.  This usually does not
 // indicate a fatal error.  Typically this error will be generated as a
 // notification to wait for some external notification that the IO operation
diff --git a/net/http/http_network_transaction.cc b/net/http/http_network_transaction.cc
index 201e391..56fe801 100644
--- a/net/http/http_network_transaction.cc
+++ b/net/http/http_network_transaction.cc
@@ -1315,6 +1315,14 @@ int HttpNetworkTransaction::HandleSSLHandshakeError(int error) {
   DCHECK(request_);
   HandleClientAuthError(error);
 
+#if defined(GOSTSSL)
+  if( error == ERR_TLS_GOST_REQUIRED )
+  {
+    ResetConnectionAndRequestForResend();
+    return OK;
+  }
+#endif // GOSTSSL
+
   // Accept deprecated cipher suites, but only on a fallback. This makes UMA
   // reflect servers require a deprecated cipher rather than merely prefer
   // it. This, however, has no security benefit until the ciphers are actually
diff --git a/net/socket/ssl_client_socket_openssl.cc b/net/socket/ssl_client_socket_openssl.cc
index 82ced7c..2ad3c6a 100644
--- a/net/socket/ssl_client_socket_openssl.cc
+++ b/net/socket/ssl_client_socket_openssl.cc
@@ -605,6 +605,26 @@ int SSLClientSocketOpenSSL::ExportKeyingMaterial(
   return OK;
 }
 
+#ifdef GOSTSSL
+#ifdef _WIN32
+#if defined ( _M_IX86 )
+#define EXPLICITSSL_CALL __cdecl
+#elif defined ( _M_X64 )
+#define EXPLICITSSL_CALL __fastcall
+#endif
+#define GOSTSSLLIB "gostssl.dll"
+#define LIBLOAD( name ) LoadLibraryA( name )
+#define LIBFUNC( lib, name ) (UINT_PTR)GetProcAddress( lib, name )
+#else // not _WIN32
+#define EXPLICITSSL_CALL
+#include <dlfcn.h>
+#define GOSTSSLLIB "gostssl.so"
+#define LIBLOAD( name ) dlopen( name, RTLD_LAZY )
+#define LIBFUNC( lib, name ) dlsym( lib, name )
+typedef void * HMODULE;
+#endif // _WIN32
+#endif // GOSTSSL
+
 int SSLClientSocketOpenSSL::GetTLSUniqueChannelBinding(std::string* out) {
   NOTIMPLEMENTED();
   return ERR_NOT_IMPLEMENTED;
@@ -631,6 +651,26 @@ int SSLClientSocketOpenSSL::Connect(const CompletionCallback& callback) {
     net_log_.EndEventWithNetErrorCode(NetLog::TYPE_SSL_CONNECT, rv);
     return rv;
   }
+
+#ifdef GOSTSSL
+  {
+      static void ( EXPLICITSSL_CALL * cachestring )( void * ssl, const char * uniq ) = NULL;
+      static int is_tried = 0;
+
+      if( !is_tried )
+      {
+          HMODULE hGSSL = LIBLOAD( GOSTSSLLIB );
+
+          if( hGSSL )
+              *(uintptr_t *)&cachestring = (uintptr_t)LIBFUNC( hGSSL, "gostssl_cachestring" );
+
+          is_tried = 1;
+      }
+
+      if( cachestring )
+          cachestring( ssl_, GetSessionCacheKey().data() );
+  }
+#endif
 
   // Set SSL to client mode. Handshake happens in the loop below.
   SSL_set_connect_state(ssl_);
@@ -1865,6 +1905,31 @@ int SSLClientSocketOpenSSL::ClientCertRequestCallback(SSL* ssl) {
     return -1;
   }
 
+#if defined(GOSTSSL)
+    if( ssl_config_.client_cert.get() )
+    {
+        static void ( EXPLICITSSL_CALL * certhook )( void * cert, int size ) = NULL;
+        static int is_tried = 0;
+
+        if( !is_tried )
+        {
+            HMODULE hGSSL = LIBLOAD( GOSTSSLLIB );
+
+            if( hGSSL )
+                *(uintptr_t *)&certhook = (uintptr_t)LIBFUNC( hGSSL, "gostssl_certhook" );
+
+            is_tried = 1;
+        }
+
+        if( certhook )
+        {
+            std::string cert_pem;
+            if( ssl_config_.client_cert->GetDEREncoded( ssl_config_.client_cert->os_cert_handle(), &cert_pem ) )
+                certhook( (void *)&cert_pem[0], cert_pem.size() );
+        }
+    }
+#endif // GOSTSSL
+
   // Second pass: a client certificate should have been selected.
   if (ssl_config_.client_cert.get()) {
     ScopedX509 leaf_x509 =
diff --git a/net/spdy/spdy_session.cc b/net/spdy/spdy_session.cc
index 0e4a3e8..6a8b8ec 100644
--- a/net/spdy/spdy_session.cc
+++ b/net/spdy/spdy_session.cc
@@ -1017,6 +1017,19 @@ bool SpdySession::HasAcceptableTransportSecurity() const {
   SSLInfo ssl_info;
   CHECK(connection_->socket()->GetSSLInfo(&ssl_info));
 
+#define GOSTSSL
+#ifdef GOSTSSL
+  // GOST is acceptable, even in TLS 1.0
+  switch( SSLConnectionStatusToCipherSuite( ssl_info.connection_status ) )
+  {
+  case 0xff85: // GOST2012-GOST8912-GOST8912
+  case 0x0081: // GOST2001-GOST89-GOST89
+      return true;
+  default:
+      break;
+  }
+#endif
+
   // HTTP/2 requires TLS 1.2+
   if (SSLConnectionStatusToVersion(ssl_info.connection_status) <
       SSL_CONNECTION_VERSION_TLS1_2) {
diff --git a/net/ssl/openssl_ssl_util.cc b/net/ssl/openssl_ssl_util.cc
index b91acdd..607fedc 100644
--- a/net/ssl/openssl_ssl_util.cc
+++ b/net/ssl/openssl_ssl_util.cc
@@ -75,6 +75,10 @@ int MapOpenSSLErrorSSL(uint32_t error_code) {
     case SSL_R_TLSV1_ALERT_PROTOCOL_VERSION:
     case SSL_R_UNSUPPORTED_PROTOCOL:
       return ERR_SSL_VERSION_OR_CIPHER_MISMATCH;
+#if defined(GOSTSSL)
+    case SSL_R_TLS_GOST_REQUIRED:
+      return ERR_TLS_GOST_REQUIRED;
+#endif // GOSTSSL
     case SSL_R_SSLV3_ALERT_BAD_CERTIFICATE:
     case SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE:
     case SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED:
diff --git a/net/ssl/ssl_cipher_suite_names.cc b/net/ssl/ssl_cipher_suite_names.cc
index 2bfe72a..640de3cf 100644
--- a/net/ssl/ssl_cipher_suite_names.cc
+++ b/net/ssl/ssl_cipher_suite_names.cc
@@ -308,6 +308,28 @@ void SSLCipherSuiteToStrings(const char** key_exchange_str,
   *key_exchange_str = *cipher_str = *mac_str = "???";
   *is_aead = false;
 
+#if defined(GOSTSSL)
+  switch( cipher_suite )
+  {
+
+  case 0x81:
+      *key_exchange_str = "GOSTR341001";
+      *cipher_str = "GOST28147CNT";
+      *mac_str = "GOST28147IMIT";
+      return;
+
+  case 0xFF85:
+      *key_exchange_str = "GOSTR341012";
+      *cipher_str = "GOST28147CNT";
+      *mac_str = "GOST28147IMIT";
+      return;
+
+  default:
+      break;
+
+  }
+#endif // GOSTSSL
+
   int key_exchange, cipher, mac;
   if (!GetCipherProperties(cipher_suite, &key_exchange, &cipher, &mac))
     return;
-- 
2.10.0.windows.1

