From 8431f73e9e3e205bf2b62e7601938272ebd69128 Mon Sep 17 00:00:00 2001
From: Dmitrii Pichulin <deem@deem.ru>
Date: Wed, 18 Apr 2018 15:09:19 +0300
Subject: [PATCH] added GOSTSSL

---
 .../common/chromium-browser/chromium-browser.info  |  10 +-
 chrome/installer/linux/common/installer.include    |   3 +
 chrome/installer/linux/rpm/chrome.spec.template    |   4 +
 .../ssl_config/ssl_config_service_manager_pref.cc  |   2 +-
 net/base/net_error_list.h                          |   6 +
 net/cert/cert_verify_proc.cc                       |  56 ++++++++
 net/http/http_network_transaction.cc               |   9 ++
 net/socket/ssl_client_socket_impl.cc               | 145 +++++++++++++++++++++
 net/spdy/chromium/spdy_session.cc                  |  13 ++
 net/ssl/client_cert_store_nss.cc                   |  59 +++++++++
 net/ssl/openssl_ssl_util.cc                        |   4 +
 net/ssl/ssl_cipher_suite_names.cc                  |  21 +++
 12 files changed, 326 insertions(+), 6 deletions(-)

diff --git a/chrome/installer/linux/common/chromium-browser/chromium-browser.info b/chrome/installer/linux/common/chromium-browser/chromium-browser.info
index 3593c9e..9826523 100644
--- a/chrome/installer/linux/common/chromium-browser/chromium-browser.info
+++ b/chrome/installer/linux/common/chromium-browser/chromium-browser.info
@@ -6,22 +6,22 @@
 # chromium-browser packages for various platforms.
 
 # Base name of the package.
-PACKAGE="chromium-browser"
+PACKAGE="chromium-gost"
 
 # Filename of the main executable (for generating launcher scripts, etc.)
 PROGNAME=chrome
 
 # Base directory for package installation.
-INSTALLDIR=/opt/chromium.org/chromium
+INSTALLDIR=/opt/chromium-gost
 
 # Display string for desktop menu/icon.
-MENUNAME="Chromium Web Browser"
+MENUNAME="chromium-gost"
 
 # Brief package description.
-SHORTDESC="The web browser from Chromium.org"
+SHORTDESC="Chromium browser with GOST cryptography support"
 
 # Detailed package description.
-FULLDESC="Chromium is a browser that combines a minimal design with sophisticated technology to make the web faster, safer, and easier."
+FULLDESC="Chromium is a browser that combines a minimal design with sophisticated technology to make the web faster, safer, and easier. This version supports GOST cryptography in TLS-connections."
 
 # Package maintainer information.
 # TODO(mmoss) Setup a mailbox for this address
diff --git a/chrome/installer/linux/common/installer.include b/chrome/installer/linux/common/installer.include
index 96996f5..9e6e29d 100644
--- a/chrome/installer/linux/common/installer.include
+++ b/chrome/installer/linux/common/installer.include
@@ -200,6 +200,9 @@ stage_install_common() {
     install -m ${SHLIB_PERMS} "${BUILDDIR}/libwidevinecdm.so" "${STAGEDIR}/${INSTALLDIR}/"
   fi
 
+  # GOSTSSL
+  install -m ${SHLIB_PERMS} "${BUILDDIR}/gostssl.so" "${STAGEDIR}/${INSTALLDIR}/"
+
   # ANGLE
   if [ -f "${BUILDDIR}/libEGL.so" ]; then
     if [ "${CHANNEL}" != "stable" ]; then
diff --git a/chrome/installer/linux/rpm/chrome.spec.template b/chrome/installer/linux/rpm/chrome.spec.template
index 55a3567..abbc16d 100644
--- a/chrome/installer/linux/rpm/chrome.spec.template
+++ b/chrome/installer/linux/rpm/chrome.spec.template
@@ -122,6 +122,8 @@ add_nss_symlinks
 
 remove_udev_symlinks
 
+if false; then
+
 DEFAULTS_FILE="/etc/default/@@PACKAGE@@"
 if [ ! -e "$DEFAULTS_FILE" ]; then
   echo 'repo_add_once="true"' > "$DEFAULTS_FILE"
@@ -160,6 +162,8 @@ fi
 service atd start
 echo "sh /etc/cron.daily/@@PACKAGE@@" | at now + 2 minute > /dev/null 2>&1
 
+fi
+
 CHANNEL=@@CHANNEL@@
 case $CHANNEL in
   stable )
diff --git a/components/ssl_config/ssl_config_service_manager_pref.cc b/components/ssl_config/ssl_config_service_manager_pref.cc
index bd0ba31..7b13925 100644
--- a/components/ssl_config/ssl_config_service_manager_pref.cc
+++ b/components/ssl_config/ssl_config_service_manager_pref.cc
@@ -296,7 +296,7 @@ void SSLConfigServiceManagerPref::GetSSLConfigFromPrefs(
   if (rev_checking_enabled_.IsManaged())
     config->rev_checking_enabled = rev_checking_enabled_.GetValue();
   else
-    config->rev_checking_enabled = false;
+    config->rev_checking_enabled = true;
   config->rev_checking_required_local_anchors =
       rev_checking_required_local_anchors_.GetValue();
   config->sha1_local_anchors_enabled = sha1_local_anchors_enabled_.GetValue();
diff --git a/net/base/net_error_list.h b/net/base/net_error_list.h
index e959b78..1f06b84 100644
--- a/net/base/net_error_list.h
+++ b/net/base/net_error_list.h
@@ -19,6 +19,12 @@
 //   700-799 Certificate manager errors
 //   800-899 DNS resolver errors
 
+#define GOSTSSL
+#if defined(GOSTSSL)
+//   3000-3099 GOSTSSL
+NET_ERROR(TLS_GOST_REQUIRED, -3072)
+#endif // GOSTSSL
+
 // An asynchronous IO operation is not yet complete.  This usually does not
 // indicate a fatal error.  Typically this error will be generated as a
 // notification to wait for some external notification that the IO operation
diff --git a/net/cert/cert_verify_proc.cc b/net/cert/cert_verify_proc.cc
index ba51d3a..81d3a37 100644
--- a/net/cert/cert_verify_proc.cc
+++ b/net/cert/cert_verify_proc.cc
@@ -480,6 +480,31 @@ scoped_refptr<CertVerifyProc> CertVerifyProc::CreateDefault() {
 #endif
 }
 
+#ifdef GOSTSSL
+#ifdef _WIN32
+#if defined ( _M_IX86 )
+#define EXPLICITSSL_CALL __cdecl
+#elif defined ( _M_X64 )
+#define EXPLICITSSL_CALL __fastcall
+#endif
+#define GOSTSSLLIB "gostssl.dll"
+extern "C" {
+HMODULE WINAPI LoadLibraryA( _In_ const CHAR * lpLibFileName );
+INT_PTR WINAPI GetProcAddress( _In_ HMODULE hModule, _In_ const CHAR * lpProcName );
+}
+#define LIBLOAD( name ) LoadLibraryA( name )
+#define LIBFUNC( lib, name ) (UINT_PTR)GetProcAddress( lib, name )
+#else // not _WIN32
+#define EXPLICITSSL_CALL
+#include <dlfcn.h>
+#define GOSTSSLLIB "gostssl.so"
+#define LIBLOAD( name ) dlopen( name, RTLD_LAZY )
+#define LIBFUNC( lib, name ) dlsym( lib, name )
+typedef void * HMODULE;
+#endif // _WIN32
+#endif // GOSTSSL
+
+
 CertVerifyProc::CertVerifyProc()
     : sha1_legacy_mode_enabled(base::FeatureList::IsEnabled(kSHA1LegacyMode)) {}
 
@@ -518,6 +543,37 @@ int CertVerifyProc::Verify(X509Certificate* cert,
   int rv = VerifyInternal(cert, hostname, ocsp_response, flags, crl_set,
                           additional_trust_anchors, verify_result);
 
+#if defined(GOSTSSL)
+  int is_gost = 0;
+  {
+      static void ( EXPLICITSSL_CALL * isgostcerthook )( void * cert, int size, int * is_gost ) = NULL;
+      static int is_tried = 0;
+
+      if( !is_tried )
+      {
+          HMODULE hGSSL = LIBLOAD( GOSTSSLLIB );
+
+          if( hGSSL )
+              *(uintptr_t *)&isgostcerthook = (uintptr_t)LIBFUNC( hGSSL, "gostssl_isgostcerthook" );
+
+          is_tried = 1;
+      }
+
+      if( isgostcerthook )
+      {
+          const uint8_t * gostcert = CRYPTO_BUFFER_data( cert->cert_buffer() );
+          size_t gostcertlen =  CRYPTO_BUFFER_len( cert->cert_buffer() );
+          isgostcerthook( (void *)gostcert, gostcertlen, &is_gost );
+      }
+  }
+
+  if( is_gost == 1 )
+  {
+      // TODO: we can check for weak GOST algos after 2018
+  }
+  else
+#endif // GOSTSSL
+
   // Check for mismatched signature algorithms and unknown signature algorithms
   // in the chain. Also fills in the has_* booleans for the digest algorithms
   // present in the chain.
diff --git a/net/http/http_network_transaction.cc b/net/http/http_network_transaction.cc
index 98f52f6..2f8cb78 100644
--- a/net/http/http_network_transaction.cc
+++ b/net/http/http_network_transaction.cc
@@ -1566,6 +1566,15 @@ int HttpNetworkTransaction::HandleSSLClientAuthError(int error) {
       return OK;
     }
   }
+
+#if defined(GOSTSSL)
+  if( error == ERR_TLS_GOST_REQUIRED )
+  {
+    ResetConnectionAndRequestForResend();
+    return OK;
+  }
+#endif // GOSTSSL
+
   return error;
 }
 
diff --git a/net/socket/ssl_client_socket_impl.cc b/net/socket/ssl_client_socket_impl.cc
index 550267a7..f89f141 100644
--- a/net/socket/ssl_client_socket_impl.cc
+++ b/net/socket/ssl_client_socket_impl.cc
@@ -574,6 +574,26 @@ int SSLClientSocketImpl::ExportKeyingMaterial(const base::StringPiece& label,
   return OK;
 }
 
+#ifdef GOSTSSL
+#ifdef _WIN32
+#if defined ( _M_IX86 )
+#define EXPLICITSSL_CALL __cdecl
+#elif defined ( _M_X64 )
+#define EXPLICITSSL_CALL __fastcall
+#endif
+#define GOSTSSLLIB "gostssl.dll"
+#define LIBLOAD( name ) LoadLibraryA( name )
+#define LIBFUNC( lib, name ) (UINT_PTR)GetProcAddress( lib, name )
+#else // not _WIN32
+#define EXPLICITSSL_CALL
+#include <dlfcn.h>
+#define GOSTSSLLIB "gostssl.so"
+#define LIBLOAD( name ) dlopen( name, RTLD_LAZY )
+#define LIBFUNC( lib, name ) dlsym( lib, name )
+typedef void * HMODULE;
+#endif // _WIN32
+#endif // GOSTSSL
+
 int SSLClientSocketImpl::Connect(const CompletionCallback& callback) {
   // Although StreamSocket does allow calling Connect() after Disconnect(),
   // this has never worked for layered sockets. CHECK to detect any consumers
@@ -592,6 +612,26 @@ int SSLClientSocketImpl::Connect(const CompletionCallback& callback) {
     return rv;
   }
 
+#ifdef GOSTSSL
+  {
+      static void ( EXPLICITSSL_CALL * cachestring )( void * ssl, const char * uniq ) = NULL;
+      static int is_tried = 0;
+
+      if( !is_tried )
+      {
+          HMODULE hGSSL = LIBLOAD( GOSTSSLLIB );
+
+          if( hGSSL )
+              *(uintptr_t *)&cachestring = (uintptr_t)LIBFUNC( hGSSL, "gostssl_cachestring" );
+
+          is_tried = 1;
+      }
+
+      if( cachestring )
+          cachestring( ssl_.get(), GetSessionCacheKey().data() );
+  }
+#endif
+
   // Set SSL to client mode. Handshake happens in the loop below.
   SSL_set_connect_state(ssl_.get());
 
@@ -1229,6 +1269,86 @@ int SSLClientSocketImpl::DoVerifyCert(int result) {
 
   start_cert_verification_time_ = base::TimeTicks::Now();
 
+#if defined(GOSTSSL) && defined(OPENSSL_LINUX)
+#define TRUST_E_CERT_SIGNATURE          0x80096004L
+#define CRYPT_E_REVOKED                 0x80092010L
+#define CERT_E_UNTRUSTEDROOT            0x800B0109L
+#define CERT_E_UNTRUSTEDTESTROOT        0x800B010DL
+#define CERT_E_REVOCATION_FAILURE       0x800B010EL
+#define CERT_E_EXPIRED                  0x800B0101L
+#define CERT_E_INVALID_NAME             0x800B0114L
+#define CERT_E_CN_NO_MATCH              0x800B010FL
+#define CERT_E_VALIDITYPERIODNESTING    0x800B0102L
+#define CRYPT_E_NO_REVOCATION_CHECK     0x80092012L
+#define CRYPT_E_REVOCATION_OFFLINE      0x80092013L
+#define CERT_E_CHAINING                 0x800B010AL
+
+    {
+        static void ( EXPLICITSSL_CALL * verifyhook )( void * ssl, unsigned * gost_status ) = NULL;
+        static int is_tried = 0;
+
+        if( !is_tried )
+        {
+            HMODULE hGSSL = LIBLOAD( GOSTSSLLIB );
+
+            if( hGSSL )
+                *(uintptr_t *)&verifyhook = (uintptr_t)LIBFUNC( hGSSL, "gostssl_verifyhook" );
+
+            is_tried = 1;
+        }
+
+        if( verifyhook )
+        {
+            unsigned gost_status;
+
+            verifyhook( (void *)ssl_.get(), &gost_status );
+
+            if( gost_status )
+            {
+                int gost_rv = OK;
+
+                switch( gost_status )
+                {
+                    case 1:
+                        break;
+                    case CERT_E_CN_NO_MATCH:
+                    case CERT_E_INVALID_NAME:
+                        gost_rv = ERR_CERT_COMMON_NAME_INVALID;
+                        break;
+                    case CERT_E_UNTRUSTEDROOT:
+                    case TRUST_E_CERT_SIGNATURE:
+                    case CERT_E_UNTRUSTEDTESTROOT:
+                    case CERT_E_CHAINING:
+                        gost_rv = ERR_CERT_AUTHORITY_INVALID;
+                        break;
+                    case CERT_E_EXPIRED:
+                    case CERT_E_VALIDITYPERIODNESTING:
+                        gost_rv = ERR_CERT_DATE_INVALID;
+                        break;
+                    case CRYPT_E_NO_REVOCATION_CHECK:
+                    case CERT_E_REVOCATION_FAILURE:
+                        gost_rv = ERR_CERT_NO_REVOCATION_MECHANISM;
+                        break;
+                    case CRYPT_E_REVOCATION_OFFLINE:
+                        gost_rv = ERR_CERT_UNABLE_TO_CHECK_REVOCATION;
+                        break;
+                    case CRYPT_E_REVOKED:
+                        gost_rv = ERR_CERT_REVOKED;
+                        break;
+                    default:
+                        gost_rv = ERR_CERT_INVALID;
+                        break;
+                }
+
+                if( gost_rv != OK )
+                    server_cert_verify_result_.cert_status = MapNetErrorToCertStatus( gost_rv );
+                server_cert_verify_result_.verified_cert = server_cert_;
+                return gost_rv;
+            }
+        }
+    }
+#endif // GOSTSSL && OPENSSL_LINUX
+
   const uint8_t* ocsp_response_raw;
   size_t ocsp_response_len;
   SSL_get0_ocsp_response(ssl_.get(), &ocsp_response_raw, &ocsp_response_len);
@@ -1664,6 +1784,31 @@ int SSLClientSocketImpl::ClientCertRequestCallback(SSL* ssl) {
     return -1;
   }
 
+#if defined(GOSTSSL)
+    if( ssl_config_.client_cert.get() )
+    {
+        static void ( EXPLICITSSL_CALL * certhook )( void * cert, int size ) = NULL;
+        static int is_tried = 0;
+
+        if( !is_tried )
+        {
+            HMODULE hGSSL = LIBLOAD( GOSTSSLLIB );
+
+            if( hGSSL )
+                *(uintptr_t *)&certhook = (uintptr_t)LIBFUNC( hGSSL, "gostssl_certhook" );
+
+            is_tried = 1;
+        }
+
+        if( certhook )
+        {
+            const uint8_t * cert = CRYPTO_BUFFER_data( ssl_config_.client_cert.get()->cert_buffer() );
+            size_t len =  CRYPTO_BUFFER_len( ssl_config_.client_cert.get()->cert_buffer() );
+            certhook( (void *)cert, len );
+        }
+    }
+#endif // GOSTSSL
+
   // Second pass: a client certificate should have been selected.
   if (ssl_config_.client_cert.get()) {
     if (!ssl_config_.client_private_key) {
diff --git a/net/spdy/chromium/spdy_session.cc b/net/spdy/chromium/spdy_session.cc
index 588ba6f..54000b6 100644
--- a/net/spdy/chromium/spdy_session.cc
+++ b/net/spdy/chromium/spdy_session.cc
@@ -1357,6 +1357,19 @@ bool SpdySession::HasAcceptableTransportSecurity() const {
   SSLInfo ssl_info;
   CHECK(GetSSLInfo(&ssl_info));
 
+#define GOSTSSL
+#ifdef GOSTSSL
+  // GOST is acceptable, even in TLS 1.0
+  switch( SSLConnectionStatusToCipherSuite( ssl_info.connection_status ) )
+  {
+  case 0xff85: // GOST2012-GOST8912-GOST8912
+  case 0x0081: // GOST2001-GOST89-GOST89
+      return true;
+  default:
+      break;
+  }
+#endif
+
   // HTTP/2 requires TLS 1.2+
   if (SSLConnectionStatusToVersion(ssl_info.connection_status) <
       SSL_CONNECTION_VERSION_TLS1_2) {
diff --git a/net/ssl/client_cert_store_nss.cc b/net/ssl/client_cert_store_nss.cc
index 7c773ee..2717a26 100644
--- a/net/ssl/client_cert_store_nss.cc
+++ b/net/ssl/client_cert_store_nss.cc
@@ -144,6 +144,26 @@ void ClientCertStoreNSS::FilterCertsOnWorkerThread(
   std::sort(identities->begin(), identities->end(), ClientCertIdentitySorter());
 }
 
+#ifdef GOSTSSL
+#ifdef _WIN32
+#if defined ( _M_IX86 )
+#define EXPLICITSSL_CALL __cdecl
+#elif defined ( _M_X64 )
+#define EXPLICITSSL_CALL __fastcall
+#endif
+#define GOSTSSLLIB "gostssl.dll"
+#define LIBLOAD( name ) LoadLibraryA( name )
+#define LIBFUNC( lib, name ) (UINT_PTR)GetProcAddress( lib, name )
+#else // not _WIN32
+#define EXPLICITSSL_CALL
+#include <dlfcn.h>
+#define GOSTSSLLIB "gostssl.so"
+#define LIBLOAD( name ) dlopen( name, RTLD_LAZY )
+#define LIBFUNC( lib, name ) dlsym( lib, name )
+typedef void * HMODULE;
+#endif // _WIN32
+#endif // GOSTSSL
+
 ClientCertIdentityList ClientCertStoreNSS::GetAndFilterCertsOnWorkerThread(
     scoped_refptr<crypto::CryptoModuleBlockingPasswordDelegate>
         password_delegate,
@@ -157,6 +177,45 @@ ClientCertIdentityList ClientCertStoreNSS::GetAndFilterCertsOnWorkerThread(
   GetPlatformCertsOnWorkerThread(std::move(password_delegate), CertFilter(),
                                  &selected_identities);
   FilterCertsOnWorkerThread(&selected_identities, *request);
+
+#if defined(GOSTSSL)
+    {
+        static unsigned ( EXPLICITSSL_CALL * clientcertshook )( char *** certs, int ** lens, int * count, int * is_gost ) = NULL;
+        static int is_tried = 0;
+
+        if( !is_tried )
+        {
+            HMODULE hGSSL = LIBLOAD( GOSTSSLLIB );
+
+            if( hGSSL )
+                *(uintptr_t *)&clientcertshook = (uintptr_t)LIBFUNC( hGSSL, "gostssl_clientcertshook" );
+
+            is_tried = 1;
+        }
+
+        if( clientcertshook )
+        {
+            char ** certs;
+            int * lens;
+            int count;
+            int is_gost;
+
+            clientcertshook( &certs, &lens, &count, &is_gost );
+
+            if( is_gost )
+            {
+                selected_identities.clear();
+                for( int i = 0; i < count; i++ )
+                {
+                    scoped_refptr<X509Certificate> cert( X509Certificate::CreateFromBytes( certs[i], lens[i] ) );
+                    selected_identities.push_back( std::make_unique<ClientCertIdentityNSS>( cert, x509_util::CreateCERTCertificateFromBytes( (uint8_t *)certs[i], lens[i] ), password_delegate) );
+                    std::sort(selected_identities.begin(), selected_identities.end(), ClientCertIdentitySorter());
+                }
+            }
+        }
+    }
+#endif // GOSTSSL
+
   return selected_identities;
 }
 
diff --git a/net/ssl/openssl_ssl_util.cc b/net/ssl/openssl_ssl_util.cc
index 92b9c6f..2ef0c70 100644
--- a/net/ssl/openssl_ssl_util.cc
+++ b/net/ssl/openssl_ssl_util.cc
@@ -84,6 +84,10 @@ int MapOpenSSLErrorSSL(uint32_t error_code) {
     case SSL_R_TLSV1_ALERT_PROTOCOL_VERSION:
     case SSL_R_UNSUPPORTED_PROTOCOL:
       return ERR_SSL_VERSION_OR_CIPHER_MISMATCH;
+#if defined(GOSTSSL)
+    case SSL_R_TLS_GOST_REQUIRED:
+      return ERR_TLS_GOST_REQUIRED;
+#endif // GOSTSSL
     case SSL_R_SSLV3_ALERT_BAD_CERTIFICATE:
     case SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE:
     case SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED:
diff --git a/net/ssl/ssl_cipher_suite_names.cc b/net/ssl/ssl_cipher_suite_names.cc
index 9436602..b08498c 100644
--- a/net/ssl/ssl_cipher_suite_names.cc
+++ b/net/ssl/ssl_cipher_suite_names.cc
@@ -55,6 +55,27 @@ void SSLCipherSuiteToStrings(const char** key_exchange_str,
   *is_aead = false;
   *is_tls13 = false;
 
+#if defined(GOSTSSL)
+  switch( cipher_suite )
+  {
+  case 0x0081: // GOST2001-GOST89-GOST89
+      *key_exchange_str = "GOSTR341001";
+      *cipher_str = "GOST28147CNT";
+      *mac_str = "GOST28147IMIT";
+      return;
+
+  case 0xff85: // GOST2012-GOST8912-GOST8912
+      *key_exchange_str = "GOSTR341012";
+      *cipher_str = "GOST28147CNT";
+      *mac_str = "GOST28147IMIT";
+      return;
+
+  default:
+      break;
+
+  }
+#endif // GOSTSSL
+
   const SSL_CIPHER* cipher = SSL_get_cipher_by_value(cipher_suite);
   if (!cipher)
     return;
-- 
2.10.0.windows.1

