From 2afe2aafd6e71233b7551cc54578cc612cb62537 Mon Sep 17 00:00:00 2001
From: Dmitrii Pichulin <deem@deem.ru>
Date: Tue, 26 Sep 2017 23:10:23 +0300
Subject: [PATCH] added GOSTSSL

---
 include/openssl/ssl.h |   8 ++++
 ssl/internal.h        |  67 ++++++++++++++++++++++++++
 ssl/s3_clnt.c         |  11 +++++
 ssl/ssl_cipher.c      |  41 ++++++++++++++++
 ssl/ssl_lib.c         | 127 ++++++++++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 254 insertions(+)

diff --git a/include/openssl/ssl.h b/include/openssl/ssl.h
index bce981c..cd87e6c 100644
--- a/include/openssl/ssl.h
+++ b/include/openssl/ssl.h
@@ -166,6 +166,10 @@
  * However, only a forward declaration is needed. */
 struct timeval;
 
+#if defined(OPENSSL_WINDOWS) || defined(OPENSSL_LINUX)
+#define GOSTSSL
+#endif
+
 #if defined(__cplusplus)
 extern "C" {
 #endif
@@ -4282,6 +4286,10 @@ OPENSSL_EXPORT int SSL_set_ssl_method(SSL *s, const SSL_METHOD *method);
 } /* extern C */
 #endif
 
+#if defined(GOSTSSL)
+#define SSL_R_TLS_GOST_REQUIRED 3072
+#endif
+
 #define SSL_R_APP_DATA_IN_HANDSHAKE 100
 #define SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT 101
 #define SSL_R_BAD_ALERT 102
diff --git a/ssl/internal.h b/ssl/internal.h
index bbbd939..01f3b31 100644
--- a/ssl/internal.h
+++ b/ssl/internal.h
@@ -168,12 +168,22 @@
 /* SSL_kPSK is only set for plain PSK, not ECDHE_PSK. */
 #define SSL_kPSK 0x00000008L
 
+#if defined(GOSTSSL)
+#define SSL_kGOST341001 0x00010000L
+#define SSL_kGOST341012 0x00020000L
+#endif
+
 /* Bits for |algorithm_auth| (server authentication). */
 #define SSL_aRSA 0x00000001L
 #define SSL_aECDSA 0x00000002L
 /* SSL_aPSK is set for both PSK and ECDHE_PSK. */
 #define SSL_aPSK 0x00000004L
 
+#if defined(GOSTSSL)
+#define SSL_aGOST341001 0x00010000L
+#define SSL_aGOST341012 0x00020000L
+#endif
+
 /* Bits for |algorithm_enc| (symmetric encryption). */
 #define SSL_3DES 0x00000001L
 #define SSL_RC4 0x00000002L
@@ -185,6 +195,10 @@
 #define SSL_eNULL 0x00000080L
 #define SSL_CHACHA20POLY1305 0x00000100L
 
+#if defined(GOSTSSL)
+#define SSL_eGOST28147 0x00010000L
+#endif
+
 #define SSL_AES (SSL_AES128 | SSL_AES256 | SSL_AES128GCM | SSL_AES256GCM)
 
 /* Bits for |algorithm_mac| (symmetric authentication). */
@@ -195,6 +209,10 @@
 /* SSL_AEAD is set for all AEADs. */
 #define SSL_AEAD 0x00000010L
 
+#if defined(GOSTSSL)
+#define SSL_iGOST28147 0x00010000L
+#endif
+
 /* Bits for |algorithm_prf| (handshake digest). */
 #define SSL_HANDSHAKE_MAC_DEFAULT 0x1
 #define SSL_HANDSHAKE_MAC_SHA256 0x2
@@ -1246,6 +1264,55 @@ uint16_t ssl3_get_max_client_version(SSL *s);
 /* ssl3_is_version_enabled returns one if |version| is an enabled protocol
  * version for |s| and zero otherwise. */
 int ssl3_is_version_enabled(SSL *s, uint16_t version);
+#if defined(GOSTSSL)
+//
+#ifndef _WIN32
+#define EXPLICITSSL_CALL
+#else
+#if defined ( _M_IX86 )
+#define EXPLICITSSL_CALL __cdecl
+#elif defined ( _M_X64 )
+#define EXPLICITSSL_CALL __fastcall
+#endif
+#endif // _WIN32
+//
+struct boringssl_method_st
+{
+    void *   ( EXPLICITSSL_CALL * BORINGSSL_malloc )( size_t size );
+    void     ( EXPLICITSSL_CALL * BORINGSSL_free )( void * ptr );
+    int      ( EXPLICITSSL_CALL * BIO_read )( BIO * bio, void * data, int len );
+    int      ( EXPLICITSSL_CALL * BIO_write )( BIO * bio, const void * data, int len );
+    long     ( EXPLICITSSL_CALL * BIO_ctrl )( BIO * bio, int cmd, long larg, void * parg );
+    _STACK * ( EXPLICITSSL_CALL * sk_new_null )( void );
+    size_t   ( EXPLICITSSL_CALL * sk_push )( _STACK * sk, void * p );
+    void *   ( EXPLICITSSL_CALL * sk_value )( const _STACK * sk, size_t i );
+    void     ( EXPLICITSSL_CALL * sk_pop_free )( _STACK * sk, void( * free_func )( void * ) );
+    int      ( EXPLICITSSL_CALL * ssl_get_new_session )( SSL * s, int is_server );
+    void     ( EXPLICITSSL_CALL * ERR_clear_error )( void );
+    void     ( EXPLICITSSL_CALL * ERR_put_error )( int, int, int, const char * file, unsigned line );
+    const SSL_CIPHER * ( EXPLICITSSL_CALL * SSL_get_cipher_by_value )( uint16_t value );
+    X509 *   ( EXPLICITSSL_CALL * d2i_X509 )( X509 ** x, const unsigned char ** in, long len );
+    X509 *   ( EXPLICITSSL_CALL * X509_up_ref )( X509 * x );
+    void     ( EXPLICITSSL_CALL * X509_free )( X509 * x );
+};
+//
+typedef struct boringssl_method_st BORINGSSL_METHOD;
+//
+struct gostssl_method_st
+{
+    int  ( EXPLICITSSL_CALL * init )( BORINGSSL_METHOD * bssl );
+    int  ( EXPLICITSSL_CALL * connect )( SSL * s, int * is_gost );
+    int  ( EXPLICITSSL_CALL * read )( SSL * s, void * buf, int len, int * is_gost );
+    int  ( EXPLICITSSL_CALL * write )( SSL * s, const void * buf, int len, int * is_gost );
+    void ( EXPLICITSSL_CALL * free )( SSL * s );
+    int ( EXPLICITSSL_CALL * tls_gost_required )( SSL * s );
+};
+//
+typedef struct gostssl_method_st GOSTSSL_METHOD;
+//
+GOSTSSL_METHOD * gostssl();
+//
+#endif
 
 /* ssl3_version_from_wire maps |wire_version| to a protocol version. For
  * SSLv3/TLS, the version is returned as-is. For DTLS, the corresponding TLS
diff --git a/ssl/s3_clnt.c b/ssl/s3_clnt.c
index f9d7693..a422553 100644
--- a/ssl/s3_clnt.c
+++ b/ssl/s3_clnt.c
@@ -869,6 +869,17 @@ int ssl3_get_server_hello(SSL *s) {
   }
   s->s3->tmp.new_cipher = c;
 
+#if defined(GOSTSSL)
+  if( gostssl() )
+  {
+      if( gostssl()->tls_gost_required( s ) )
+      {
+          ssl3_send_alert( s, SSL3_AL_FATAL, SSL_AD_ILLEGAL_PARAMETER );
+          return -1;
+      }
+  }
+#endif
+
   /* Now that the cipher is known, initialize the handshake hash. */
   if (!ssl3_init_handshake_hash(s)) {
     goto f_err;
diff --git a/ssl/ssl_cipher.c b/ssl/ssl_cipher.c
index 6d8237d..5d65f93 100644
--- a/ssl/ssl_cipher.c
+++ b/ssl/ssl_cipher.c
@@ -295,6 +295,19 @@ static const SSL_CIPHER kCiphers[] = {
      SSL_HANDSHAKE_MAC_SHA256,
     },
 
+#if defined(GOSTSSL)
+    /* Cipher 81 (GOSTSSL) */
+    {
+        "TLS_GOSTR341001_WITH_28147_CNT_IMIT",
+        0x03000081,
+        SSL_kGOST341001,
+        SSL_aGOST341001,
+        SSL_eGOST28147,
+        SSL_iGOST28147,
+        SSL_HANDSHAKE_MAC_DEFAULT,
+    },
+#endif
+
     /* PSK cipher suites. */
 
     /* Cipher 8A */
@@ -616,6 +629,20 @@ static const SSL_CIPHER kCiphers[] = {
      SSL_AEAD,
      SSL_HANDSHAKE_MAC_SHA256,
     },
+
+#if defined(GOSTSSL)
+    /* Cipher FF85 (GOSTSSL) */
+    {
+        "TLS_GOSTR341012_256_WITH_28147_CNT_IMIT",
+        0x0300FF85,
+        SSL_kGOST341012,
+        SSL_aGOST341012,
+        SSL_eGOST28147,
+        SSL_iGOST28147,
+        SSL_HANDSHAKE_MAC_DEFAULT,
+    },
+#endif
+
 };
 
 static const size_t kCiphersLen = sizeof(kCiphers) / sizeof(kCiphers[0]);
@@ -1449,6 +1476,17 @@ ssl_create_cipher_list(const SSL_PROTOCOL_METHOD *ssl_method,
   ssl_cipher_apply_rule(0, ~0u, ~0u, SSL_3DES, ~0u, 0, CIPHER_ADD, -1, 0, &head,
                         &tail);
 
+#if defined(GOSTSSL)
+  if( gostssl() )
+  {
+      ssl_cipher_apply_rule( 0, ~0u, ~0u, SSL_eGOST28147, ~0u, 0, CIPHER_ADD, -1, 0, &head, &tail );
+  }
+  else
+  {
+      ssl_cipher_apply_rule( 0, ~0u, ~0u, SSL_eGOST28147, ~0u, 0, CIPHER_KILL, -1, 0, &head, &tail );
+  }
+#endif
+
   /* Temporarily enable everything else for sorting */
   ssl_cipher_apply_rule(0, ~0u, ~0u, ~0u, ~0u, 0, CIPHER_ADD, -1, 0, &head,
                         &tail);
@@ -1769,6 +1807,9 @@ int SSL_CIPHER_get_bits(const SSL_CIPHER *cipher, int *out_alg_bits) {
 #if !defined(BORINGSSL_ANDROID_SYSTEM)
     case SSL_CHACHA20POLY1305_OLD:
 #endif
+#if defined(GOSTSSL)
+    case SSL_eGOST28147:
+#endif
     case SSL_CHACHA20POLY1305:
       alg_bits = 256;
       strength_bits = 256;
diff --git a/ssl/ssl_lib.c b/ssl/ssl_lib.c
index beb57ad..75238d4 100644
--- a/ssl/ssl_lib.c
+++ b/ssl/ssl_lib.c
@@ -208,6 +208,88 @@ static int ssl_session_cmp(const SSL_SESSION *a, const SSL_SESSION *b) {
   return memcmp(a->session_id, b->session_id, a->session_id_length);
 }
 
+#if defined(GOSTSSL)
+
+#ifdef _WIN32
+#if defined ( _M_IX86 )
+#define EXPLICITSSL_CALL __cdecl
+#elif defined ( _M_X64 )
+#define EXPLICITSSL_CALL __fastcall
+#endif
+#define GOSTSSLLIB "gostssl.dll"
+#define LIBLOAD( name ) LoadLibraryA( name )
+#define LIBFUNC( lib, name ) (UINT_PTR)GetProcAddress( lib, name )
+#else // not _WIN32
+#define EXPLICITSSL_CALL
+#include <dlfcn.h>
+#define GOSTSSLLIB "gostssl.so"
+#define LIBLOAD( name ) dlopen( name, RTLD_LAZY )
+#define LIBFUNC( lib, name ) dlsym( lib, name )
+typedef void * HMODULE;
+#endif // _WIN32
+
+static BORINGSSL_METHOD gostssl_bssl = {
+    OPENSSL_malloc,
+    OPENSSL_free,
+    BIO_read,
+    BIO_write,
+    BIO_ctrl,
+    sk_new_null,
+    sk_push,
+    sk_value,
+    sk_pop_free,
+    ssl_get_new_session,
+    ERR_clear_error,
+    ERR_put_error,
+    SSL_get_cipher_by_value,
+    d2i_X509,
+    X509_up_ref,
+    X509_free,
+    };
+
+GOSTSSL_METHOD * gostssl()
+{
+    static GOSTSSL_METHOD gssl = { 0 };
+    static int is_gost = 0;
+    static int is_tried = 0;
+
+    if( is_gost )
+        return &gssl;
+
+    if( !is_tried )
+    {
+        HMODULE hGSSL = LIBLOAD( GOSTSSLLIB );
+
+        if( hGSSL )
+        {
+            *(uintptr_t *)&gssl.init = (uintptr_t)LIBFUNC( hGSSL, "gostssl_init" );
+            *(uintptr_t *)&gssl.connect = (uintptr_t)LIBFUNC( hGSSL, "gostssl_connect" );
+            *(uintptr_t *)&gssl.read = (uintptr_t)LIBFUNC( hGSSL, "gostssl_read" );
+            *(uintptr_t *)&gssl.write = (uintptr_t)LIBFUNC( hGSSL, "gostssl_write" );
+            *(uintptr_t *)&gssl.free = (uintptr_t)LIBFUNC( hGSSL, "gostssl_free" );
+            *(uintptr_t *)&gssl.tls_gost_required = (uintptr_t)LIBFUNC( hGSSL, "gostssl_tls_gost_required" );
+
+            if( gssl.init &&
+                gssl.connect &&
+                gssl.read &&
+                gssl.write &&
+                gssl.free &&
+                gssl.tls_gost_required &&
+                gssl.init( &gostssl_bssl ) )
+            {
+                is_gost = 1;
+                return &gssl;
+            }
+        }
+
+        is_tried = 1;
+    }
+
+    return NULL;
+}
+
+#endif
+
 SSL_CTX *SSL_CTX_new(const SSL_METHOD *method) {
   SSL_CTX *ret = NULL;
 
@@ -458,6 +540,12 @@ void SSL_free(SSL *ssl) {
   if (ssl == NULL) {
     return;
   }
+#if defined(GOSTSSL)
+  if( gostssl() )
+  {
+      gostssl()->free( ssl );
+  }
+#endif
 
   X509_VERIFY_PARAM_free(ssl->param);
 
@@ -560,6 +648,19 @@ int SSL_do_handshake(SSL *ssl) {
     return 1;
   }
 
+#if defined(GOSTSSL)
+  if( gostssl() )
+  {
+      int is_gost;
+      int ret_gost;
+
+      ret_gost = gostssl()->connect( ssl, &is_gost );
+
+      if( is_gost )
+          return ret_gost;
+  }
+#endif
+
   return ssl->handshake_func(ssl);
 }
 
@@ -602,6 +703,19 @@ int SSL_read(SSL *ssl, void *buf, int num) {
     return 0;
   }
 
+#if defined(GOSTSSL)
+  if( gostssl() )
+  {
+      int is_gost;
+      int ret_gost;
+
+      ret_gost = gostssl()->read( ssl, buf, num, &is_gost );
+
+      if( is_gost )
+          return ret_gost;
+  }
+#endif
+
   ERR_clear_system_error();
   return ssl->method->ssl_read_app_data(ssl, buf, num, 0);
 }
@@ -632,6 +746,19 @@ int SSL_write(SSL *ssl, const void *buf, int num) {
     return -1;
   }
 
+#if defined(GOSTSSL)
+  if( gostssl() )
+  {
+      int is_gost;
+      int ret_gost;
+
+      ret_gost = gostssl()->write( ssl, buf, num, &is_gost );
+
+      if( is_gost )
+          return ret_gost;
+  }
+#endif
+
   ERR_clear_system_error();
   return ssl->method->ssl_write_app_data(ssl, buf, num);
 }
-- 
2.10.0.windows.1

