From 5f487610fb398e6bbef191a5c11c323608d70dc7 Mon Sep 17 00:00:00 2001
From: Dmitrii Pichulin <deem@deem.ru>
Date: Wed, 6 Sep 2017 12:35:51 +0300
Subject: [PATCH] added GOSTSSL

---
 include/openssl/ssl.h   |   8 ++++
 include/openssl/tls1.h  |   5 ++
 ssl/handshake_client.cc |  11 +++++
 ssl/internal.h          |  63 ++++++++++++++++++++++++
 ssl/ssl_cipher.cc       |  38 +++++++++++++++
 ssl/ssl_lib.cc          | 125 ++++++++++++++++++++++++++++++++++++++++++++++++
 6 files changed, 250 insertions(+)

diff --git a/include/openssl/ssl.h b/include/openssl/ssl.h
index 4a1a726..833e0f3 100644
--- a/include/openssl/ssl.h
+++ b/include/openssl/ssl.h
@@ -163,6 +163,10 @@
  * However, only a forward declaration is needed. */
 struct timeval;
 
+#if defined(OPENSSL_WINDOWS) || defined(OPENSSL_LINUX)
+#define GOSTSSL
+#endif
+
 #if defined(__cplusplus)
 extern "C" {
 #endif
@@ -4592,6 +4596,10 @@ BORINGSSL_MAKE_DELETER(SSL_SESSION, SSL_SESSION_free)
 
 #endif
 
+#if defined(GOSTSSL)
+#define SSL_R_TLS_GOST_REQUIRED 3072
+#endif
+
 #define SSL_R_APP_DATA_IN_HANDSHAKE 100
 #define SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT 101
 #define SSL_R_BAD_ALERT 102
diff --git a/include/openssl/tls1.h b/include/openssl/tls1.h
index 1842ee5..eac8a57 100644
--- a/include/openssl/tls1.h
+++ b/include/openssl/tls1.h
@@ -585,6 +585,11 @@ extern "C" {
 #define TLS1_TXT_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256 \
   "ECDHE-PSK-CHACHA20-POLY1305"
 
+#define TLS1_TXT_GOST2001_GOST89_GOST89 \
+  "GOST2001-GOST89-GOST89"
+#define TLS1_TXT_GOST2012_GOST8912_GOST8912 \
+  "GOST2012-GOST8912-GOST8912"
+
 /* TLS 1.3 ciphersuites from draft-ietf-tls-tls13-16 */
 #define TLS1_TXT_AES_128_GCM_SHA256 "AEAD-AES128-GCM-SHA256"
 #define TLS1_TXT_AES_256_GCM_SHA384 "AEAD-AES256-GCM-SHA384"
diff --git a/ssl/handshake_client.cc b/ssl/handshake_client.cc
index e60b6ae..ea3f5d4 100644
--- a/ssl/handshake_client.cc
+++ b/ssl/handshake_client.cc
@@ -1028,6 +1028,17 @@ static int ssl3_get_server_hello(SSL_HANDSHAKE *hs) {
   }
   hs->new_cipher = c;
 
+#if defined(GOSTSSL)
+  if( gostssl() )
+  {
+      if( gostssl()->tls_gost_required( ssl ) )
+      {
+          ssl3_send_alert( ssl, SSL3_AL_FATAL, SSL_AD_ILLEGAL_PARAMETER );
+          return -1;
+      }
+  }
+#endif
+
   /* Now that the cipher is known, initialize the handshake hash and hash the
    * ServerHello. */
   if (!SSL_TRANSCRIPT_init_hash(&hs->transcript, ssl3_protocol_version(ssl),
diff --git a/ssl/internal.h b/ssl/internal.h
index e2a3af4..ddff63d 100644
--- a/ssl/internal.h
+++ b/ssl/internal.h
@@ -223,6 +223,11 @@ uint16_t ssl3_protocol_version(const SSL *ssl);
 #define SSL_kPSK 0x00000004u
 #define SSL_kGENERIC 0x00000008u
 
+#if defined(GOSTSSL)
+#define SSL_kGOST341001 0x00010000L
+#define SSL_kGOST341012 0x00020000L
+#endif
+
 /* Bits for |algorithm_auth| (server authentication). */
 #define SSL_aRSA 0x00000001u
 #define SSL_aECDSA 0x00000002u
@@ -230,6 +235,11 @@ uint16_t ssl3_protocol_version(const SSL *ssl);
 #define SSL_aPSK 0x00000004u
 #define SSL_aGENERIC 0x00000008u
 
+#if defined(GOSTSSL)
+#define SSL_aGOST341001 0x00010000L
+#define SSL_aGOST341012 0x00020000L
+#endif
+
 #define SSL_aCERT (SSL_aRSA | SSL_aECDSA)
 
 /* Bits for |algorithm_enc| (symmetric encryption). */
@@ -241,6 +251,10 @@ uint16_t ssl3_protocol_version(const SSL *ssl);
 #define SSL_eNULL                0x00000020u
 #define SSL_CHACHA20POLY1305     0x00000040u
 
+#if defined(GOSTSSL)
+#define SSL_eGOST28147 0x00010000L
+#endif
+
 #define SSL_AES (SSL_AES128 | SSL_AES256 | SSL_AES128GCM | SSL_AES256GCM)
 
 /* Bits for |algorithm_mac| (symmetric authentication). */
@@ -250,6 +264,10 @@ uint16_t ssl3_protocol_version(const SSL *ssl);
 /* SSL_AEAD is set for all AEADs. */
 #define SSL_AEAD 0x00000008u
 
+#if defined(GOSTSSL)
+#define SSL_iGOST28147 0x00010000L
+#endif
+
 /* Bits for |algorithm_prf| (handshake digest). */
 #define SSL_HANDSHAKE_MAC_DEFAULT 0x1
 #define SSL_HANDSHAKE_MAC_SHA256 0x2
@@ -2380,6 +2398,51 @@ void ssl_get_current_time(const SSL *ssl, struct OPENSSL_timeval *out_clock);
 /* ssl_reset_error_state resets state for |SSL_get_error|. */
 void ssl_reset_error_state(SSL *ssl);
 
+#if defined(GOSTSSL)
+//
+#ifndef _WIN32
+#define EXPLICITSSL_CALL
+#else
+#if defined ( _M_IX86 )
+#define EXPLICITSSL_CALL __cdecl
+#elif defined ( _M_X64 )
+#define EXPLICITSSL_CALL __fastcall
+#endif
+#endif // _WIN32
+//
+struct boringssl_method_st
+{
+    void *   ( EXPLICITSSL_CALL * BORINGSSL_malloc )( size_t size );
+    void     ( EXPLICITSSL_CALL * BORINGSSL_free )( void * ptr );
+    int      ( EXPLICITSSL_CALL * BIO_read )( BIO * bio, void * data, int len );
+    int      ( EXPLICITSSL_CALL * BIO_write )( BIO * bio, const void * data, int len );
+    long     ( EXPLICITSSL_CALL * BIO_ctrl )( BIO * bio, int cmd, long larg, void * parg );
+    _STACK * ( EXPLICITSSL_CALL * sk_new_null )( void );
+    size_t   ( EXPLICITSSL_CALL * sk_push )( _STACK * sk, void * p );
+    int      ( EXPLICITSSL_CALL * ssl_get_new_session )( SSL_HANDSHAKE * hs, int is_server );
+    void     ( EXPLICITSSL_CALL * ERR_clear_error )( void );
+    void     ( EXPLICITSSL_CALL * ERR_put_error )( int, int, int, const char * file, unsigned line );
+    const SSL_CIPHER * ( EXPLICITSSL_CALL * SSL_get_cipher_by_value )( uint16_t value );
+    CRYPTO_BUFFER * ( EXPLICITSSL_CALL * CRYPTO_BUFFER_new )( const uint8_t * data, size_t len, CRYPTO_BUFFER_POOL * pool );
+};
+//
+typedef struct boringssl_method_st BORINGSSL_METHOD;
+//
+struct gostssl_method_st
+{
+    int  ( EXPLICITSSL_CALL * init )( BORINGSSL_METHOD * bssl );
+    int  ( EXPLICITSSL_CALL * connect )( SSL * s, int * is_gost );
+    int  ( EXPLICITSSL_CALL * read )( SSL * s, void * buf, int len, int * is_gost );
+    int  ( EXPLICITSSL_CALL * write )( SSL * s, const void * buf, int len, int * is_gost );
+    void ( EXPLICITSSL_CALL * free )( SSL * s );
+    int ( EXPLICITSSL_CALL * tls_gost_required )( SSL * s );
+};
+//
+typedef struct gostssl_method_st GOSTSSL_METHOD;
+//
+GOSTSSL_METHOD * gostssl();
+//
+#endif
 
 /* Utility macros */
 
diff --git a/ssl/ssl_cipher.cc b/ssl/ssl_cipher.cc
index c0f4122..a4091f6 100644
--- a/ssl/ssl_cipher.cc
+++ b/ssl/ssl_cipher.cc
@@ -235,6 +235,20 @@ static const SSL_CIPHER kCiphers[] = {
      SSL_HANDSHAKE_MAC_SHA256,
     },
 
+#if defined(GOSTSSL)
+    /* Cipher 81 (GOSTSSL) */
+    {
+        TLS1_TXT_GOST2001_GOST89_GOST89,
+        "TLS_GOSTR341001_WITH_28147_CNT_IMIT",
+        0x03000081,
+        SSL_kGOST341001,
+        SSL_aGOST341001,
+        SSL_eGOST28147,
+        SSL_iGOST28147,
+        SSL_HANDSHAKE_MAC_DEFAULT,
+    },
+#endif
+
     /* PSK cipher suites. */
 
     /* Cipher 8C */
@@ -539,6 +553,20 @@ static const SSL_CIPHER kCiphers[] = {
      SSL_HANDSHAKE_MAC_SHA256,
     },
 
+#if defined(GOSTSSL)
+    /* Cipher FF85 (GOSTSSL) */
+    {
+        TLS1_TXT_GOST2012_GOST8912_GOST8912,
+        "TLS_GOSTR341012_256_WITH_28147_CNT_IMIT",
+        0x0300FF85,
+        SSL_kGOST341012,
+        SSL_aGOST341012,
+        SSL_eGOST28147,
+        SSL_iGOST28147,
+        SSL_HANDSHAKE_MAC_DEFAULT,
+    },
+#endif
+
 };
 
 static const size_t kCiphersLen = OPENSSL_ARRAY_SIZE(kCiphers);
@@ -1276,6 +1304,13 @@ int ssl_create_cipher_list(
   ssl_cipher_apply_rule(0, ~0u, ~0u, SSL_3DES, ~0u, 0, CIPHER_ADD, -1, 0, &head,
                         &tail);
 
+#if defined(GOSTSSL)
+  if( gostssl() )
+  {
+      ssl_cipher_apply_rule( 0, ~0u, ~0u, SSL_eGOST28147, ~0u, 0, CIPHER_ADD, -1, 0, &head, &tail );
+  }
+#endif
+
   /* Temporarily enable everything else for sorting */
   ssl_cipher_apply_rule(0, ~0u, ~0u, ~0u, ~0u, 0, CIPHER_ADD, -1, 0, &head,
                         &tail);
@@ -1535,6 +1570,9 @@ int SSL_CIPHER_get_bits(const SSL_CIPHER *cipher, int *out_alg_bits) {
 
     case SSL_AES256:
     case SSL_AES256GCM:
+#if defined(GOSTSSL)
+    case SSL_eGOST28147:
+#endif
     case SSL_CHACHA20POLY1305:
       alg_bits = 256;
       strength_bits = 256;
diff --git a/ssl/ssl_lib.cc b/ssl/ssl_lib.cc
index b2d5f02..9ed4dfc 100644
--- a/ssl/ssl_lib.cc
+++ b/ssl/ssl_lib.cc
@@ -226,6 +226,85 @@ static int ssl_session_cmp(const SSL_SESSION *a, const SSL_SESSION *b) {
   return OPENSSL_memcmp(a->session_id, b->session_id, a->session_id_length);
 }
 
+#if defined(GOSTSSL)
+
+#ifdef _WIN32
+#if defined ( _M_IX86 )
+#define EXPLICITSSL_CALL __cdecl
+#elif defined ( _M_X64 )
+#define EXPLICITSSL_CALL __fastcall
+#endif
+#define GOSTSSLLIB "gostssl.dll"
+#define LIBLOAD( name ) LoadLibraryA( name )
+#define LIBFUNC( lib, name ) (UINT_PTR)GetProcAddress( lib, name )
+#else // not _WIN32
+#define EXPLICITSSL_CALL
+#include <dlfcn.h>
+#define GOSTSSLLIB "gostssl.so"
+#define LIBLOAD( name ) dlopen( name, RTLD_LAZY )
+#define LIBFUNC( lib, name ) dlsym( lib, name )
+typedef void * HMODULE;
+#endif // _WIN32
+
+static BORINGSSL_METHOD gostssl_bssl = {
+    OPENSSL_malloc,
+    OPENSSL_free,
+    BIO_read,
+    BIO_write,
+    BIO_ctrl,
+    sk_new_null,
+    sk_push,
+    ssl_get_new_session,
+
+    ERR_clear_error,
+    ERR_put_error,
+    SSL_get_cipher_by_value,
+    CRYPTO_BUFFER_new,
+};
+
+GOSTSSL_METHOD * gostssl()
+{
+    static GOSTSSL_METHOD gssl = { 0 };
+    static int is_gost = 0;
+    static int is_tried = 0;
+
+    if( is_gost )
+        return &gssl;
+
+    if( !is_tried )
+    {
+        HMODULE hGSSL = LIBLOAD( GOSTSSLLIB );
+
+        if( hGSSL )
+        {
+            *(uintptr_t *)&gssl.init = (uintptr_t)LIBFUNC( hGSSL, "gostssl_init" );
+            *(uintptr_t *)&gssl.connect = (uintptr_t)LIBFUNC( hGSSL, "gostssl_connect" );
+            *(uintptr_t *)&gssl.read = (uintptr_t)LIBFUNC( hGSSL, "gostssl_read" );
+            *(uintptr_t *)&gssl.write = (uintptr_t)LIBFUNC( hGSSL, "gostssl_write" );
+            *(uintptr_t *)&gssl.free = (uintptr_t)LIBFUNC( hGSSL, "gostssl_free" );
+            *(uintptr_t *)&gssl.tls_gost_required = (uintptr_t)LIBFUNC( hGSSL, "gostssl_tls_gost_required" );
+
+            if( gssl.init &&
+                gssl.connect &&
+                gssl.read &&
+                gssl.write &&
+                gssl.free &&
+                gssl.tls_gost_required &&
+                gssl.init( &gostssl_bssl ) )
+            {
+                is_gost = 1;
+                return &gssl;
+            }
+        }
+
+        is_tried = 1;
+    }
+
+    return NULL;
+}
+
+#endif
+
 SSL_CTX *SSL_CTX_new(const SSL_METHOD *method) {
   SSL_CTX *ret = NULL;
 
@@ -473,6 +552,13 @@ void SSL_free(SSL *ssl) {
     ssl->ctx->x509_method->ssl_free(ssl);
   }
 
+#if defined(GOSTSSL)
+  if( gostssl() )
+  {
+      gostssl()->free( ssl );
+  }
+#endif
+
   CRYPTO_free_ex_data(&g_ex_data_class_ssl, ssl, &ssl->ex_data);
 
   BIO_free_all(ssl->rbio);
@@ -587,6 +673,19 @@ int SSL_do_handshake(SSL *ssl) {
     return -1;
   }
 
+#if defined(GOSTSSL)
+  if( gostssl() )
+  {
+      int is_gost;
+      int ret_gost;
+
+      ret_gost = gostssl()->connect( ssl, &is_gost );
+
+      if( is_gost )
+          return ret_gost;
+  }
+#endif
+
   /* Run the handshake. */
   assert(ssl->s3->hs != NULL);
   int ret = ssl->handshake_func(ssl->s3->hs);
@@ -720,6 +819,19 @@ static int ssl_read_impl(SSL *ssl, void *buf, int num, int peek) {
       }
     }
 
+#if defined(GOSTSSL)
+  if( gostssl() )
+  {
+      int is_gost;
+      int ret_gost;
+
+      ret_gost = gostssl()->read( ssl, buf, num, &is_gost );
+
+      if( is_gost )
+          return ret_gost;
+  }
+#endif
+
     int got_handshake;
     int ret = ssl->method->read_app_data(ssl, &got_handshake, (uint8_t *)buf,
                                          num, peek);
@@ -777,6 +889,19 @@ int SSL_write(SSL *ssl, const void *buf, int num) {
       }
     }
 
+#if defined(GOSTSSL)
+  if( gostssl() )
+  {
+      int is_gost;
+      int ret_gost;
+
+      ret_gost = gostssl()->write( ssl, buf, num, &is_gost );
+
+      if( is_gost )
+          return ret_gost;
+  }
+#endif
+
     ret = ssl->method->write_app_data(ssl, &needs_handshake,
                                       (const uint8_t *)buf, num);
   } while (needs_handshake);
-- 
2.10.0.windows.1

